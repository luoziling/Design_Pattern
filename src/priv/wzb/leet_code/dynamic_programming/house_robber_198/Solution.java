package priv.wzb.leet_code.dynamic_programming.house_robber_198;

/**
 * @author Satsuki
 * @time 2019/12/2 20:37
 * @description:
 * 你是一个专业的小偷，计划偷窃沿街的房屋。每间房内都藏有一定的现金，影响你偷窃的唯一制约因素就是相邻的房屋装有相互连通的防盗系统，如果两间相邻的房屋在同一晚上被小偷闯入，系统会自动报警。
 *
 * 给定一个代表每个房屋存放金额的非负整数数组，计算你在不触动警报装置的情况下，能够偷窃到的最高金额。
 *
 * 示例 1:
 *
 * 输入: [1,2,3,1]
 * 输出: 4
 * 解释: 偷窃 1 号房屋 (金额 = 1) ，然后偷窃 3 号房屋 (金额 = 3)。
 *      偷窃到的最高金额 = 1 + 3 = 4 。
 * 示例 2:
 *
 * 输入: [2,7,9,3,1]
 * 输出: 12
 * 解释: 偷窃 1 号房屋 (金额 = 2), 偷窃 3 号房屋 (金额 = 9)，接着偷窃 5 号房屋 (金额 = 1)。
 *      偷窃到的最高金额 = 2 + 9 + 1 = 12 。
 *
 * 来源：力扣（LeetCode）
 * 链接：https://leetcode-cn.com/problems/house-robber
 * 著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。
 * 利用动态规划思想将问题进行转化
 * 问题的核心是如果两间相邻的房屋在同一晚上被小偷闯入，系统会自动报警。
 * 1.找到原问题和子问题 原问题：求解第i家人家如何获取最高财富 子问题：求解0，1，···，i家人家如何获得最高财富
 * 2.确认状态：前i个房子可获取的最高财富
 * 3.边界：如果只有一个房子那么这个房子的财富就是可以获取的最高财富，如果只有两个房子，那么两个房子中财富较高的房子的财富就是最高财富
 * 4.确定状态转移方程：对于第i个房子由两个选项：选获得第i个房子的财富那么这个财富值加上第（i-2）可获得的最高财富就是最后财富
 * 不获取第i个房子的财富，那么可获得的财富就是前i-1个房子的最高财富
 * 第i个房子的财富就是这两种状态求较高值
 */
public class Solution {
    public int rob(int[] nums) {
        // 检测数据
        if (nums.length==0){
            return 0;
        }
        // 动态规划数组存储前i个房子的最高财富值
        int[] dp = new int[nums.length];

        // 边界
        if (nums.length == 1){
            return nums[0];
        }

        if (nums.length==2){
            return Math.max(nums[0],nums[1]);
        }
        dp[0] = nums[0];
        dp[1] = Math.max(nums[0],nums[1]);

        for (int i = 2; i < nums.length; i++) {
            // 状态转移方程
            dp[i] = Math.max(nums[i]+dp[i-2],dp[i-1]);
        }

        // 返回最后一个
        return dp[dp.length-1];

    }
}
